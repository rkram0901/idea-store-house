{"version":3,"file":"superstruct.js","sources":["../../src/superstruct.ts"],"sourcesContent":["import {\n  appendErrors,\n  transformToNestObject,\n  Resolver,\n  FieldValues,\n} from 'react-hook-form';\nimport Superstruct from 'superstruct';\nimport convertArrayToPathName from './utils/convertArrayToPathName';\n\nconst parseErrorSchema = (\n  error: Superstruct.StructError,\n  validateAllFieldCriteria: boolean,\n) =>\n  Array.isArray(error.failures)\n    ? error.failures.reduce(\n        (previous: Record<string, any>, { path, message = '', type }) => {\n          const currentPath = convertArrayToPathName(path);\n\n          return {\n            ...previous,\n            ...(path\n              ? previous[currentPath] && validateAllFieldCriteria\n                ? {\n                    [currentPath]: appendErrors(\n                      currentPath,\n                      validateAllFieldCriteria,\n                      previous,\n                      type || '',\n                      message,\n                    ),\n                  }\n                : {\n                    [currentPath]: previous[currentPath] || {\n                      message,\n                      type,\n                      ...(validateAllFieldCriteria\n                        ? {\n                            types: { [type || '']: message || true },\n                          }\n                        : {}),\n                    },\n                  }\n              : {}),\n          };\n        },\n        {},\n      )\n    : [];\n\nexport const superstructResolver = <TFieldValues extends FieldValues>(\n  schema: Superstruct.Struct,\n): Resolver<TFieldValues> => async (\n  values,\n  _,\n  validateAllFieldCriteria = false,\n) => {\n  try {\n    return {\n      values: schema(values),\n      errors: {},\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(\n        parseErrorSchema(e, validateAllFieldCriteria),\n      ),\n    };\n  }\n};\n"],"names":["parseErrorSchema","error","validateAllFieldCriteria","Array","isArray","failures","reduce","previous","_a","path","_e","message","type","currentPath","convertArrayToPathName","appendErrors","types","_d","schema","values","_","errors","e","transformToNestObject"],"mappings":"sMASMA,EAAmB,SACvBC,EACAC,GAEA,OAAAC,MAAMC,QAAQH,EAAMI,UAChBJ,EAAMI,SAASC,QACb,SAACC,EAA+BC,aAAEC,SAAMC,YAAAC,aAAU,KAAIC,SAC9CC,EAAcC,UAAuBL,GAE3C,gCACKF,GACCE,EACAF,EAASM,IAAgBX,UAEpBW,GAAcE,eACbF,EACAX,EACAK,EACAK,GAAQ,GACRD,cAIDE,GAAcN,EAASM,gBACtBF,UACAC,QACIV,EACA,CACEc,YAASC,EAACL,GAAQ,IAAKD,IAAW,MAEpC,OAGV,MAGR,IAEF,gCAE6B,SACjCO,GAC2B,OAAA,SAC3BC,EACAC,EACAlB,uBAAAA,0FAEA,IACE,SAAO,CACLiB,OAAQD,EAAOC,GACfE,OAAQ,KAEV,MAAOC,GACP,SAAO,CACLH,OAAQ,GACRE,OAAQE,wBACNvB,EAAiBsB,EAAGpB"}