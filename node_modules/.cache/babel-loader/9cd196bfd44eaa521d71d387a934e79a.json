{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Projects\\\\Hackathon\\\\stack-underflow-master\\\\client\\\\src\\\\components\\\\AnswerForm.js\",\n    _s = $RefreshSig$();\n\nimport { useForm } from \"react-hook-form\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { useMutation } from \"@apollo/client\";\nimport { POST_ANSWER } from \"../graphql/mutations\";\nimport { VIEW_QUESTION } from \"../graphql/queries\";\nimport { useAuthContext } from \"../context/auth\";\nimport { useStateContext } from \"../context/state\";\nimport AuthFormModal from \"../components/AuthFormModal\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { getErrorMsg } from \"../utils/helperFuncs\";\nimport { Typography, Button, TextField, Chip, Link } from \"@material-ui/core\";\nimport { useQuesPageStyles } from \"../styles/muiStyles\";\nconst validationSchema = yup.object({\n  answerBody: yup.string().min(30, \"Must be at least 30 characters\")\n});\n\nconst AnswerForm = ({\n  quesId,\n  tags\n}) => {\n  _s();\n\n  const classes = useQuesPageStyles();\n  const {\n    user\n  } = useAuthContext();\n  const {\n    clearEdit,\n    notify\n  } = useStateContext();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    errors\n  } = useForm({\n    mode: \"onChange\",\n    resolver: yupResolver(validationSchema)\n  });\n  const [addAnswer, {\n    loading\n  }] = useMutation(POST_ANSWER, {\n    onError: err => {\n      notify(getErrorMsg(err), \"error\");\n    }\n  });\n\n  const postAnswer = ({\n    answerBody\n  }) => {\n    addAnswer({\n      variables: {\n        quesId,\n        body: answerBody\n      },\n      update: (proxy, {\n        data\n      }) => {\n        reset();\n        const dataInCache = proxy.readQuery({\n          query: VIEW_QUESTION,\n          variables: {\n            quesId\n          }\n        });\n        const updatedData = { ...dataInCache.viewQuestion,\n          answers: data.postAnswer\n        };\n        proxy.writeQuery({\n          query: VIEW_QUESTION,\n          variables: {\n            quesId\n          },\n          data: {\n            viewQuestion: updatedData\n          }\n        });\n        notify(\"Answer submitted!\");\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.answerForm,\n    children: [user && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      color: \"secondary\",\n      children: \"Your Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), user && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(postAnswer),\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        inputRef: register,\n        name: \"answerBody\",\n        required: true,\n        fullWidth: true,\n        type: \"text\",\n        placeholder: \"Enter atleast 30 characters\",\n        variant: \"outlined\",\n        size: \"small\",\n        error: \"answerBody\" in errors,\n        helperText: \"answerBody\" in errors ? errors.answerBody.message : \"\",\n        multiline: true,\n        rows: 5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"contained\",\n          style: {\n            marginTop: \"0.8em\"\n          },\n          type: \"submit\",\n          disabled: loading,\n          children: \"Post Your comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.footerText,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Browse other Ideas tagged\", \" \", tags.map(t => /*#__PURE__*/_jsxDEV(Chip, {\n          label: t,\n          variant: \"outlined\",\n          color: \"primary\",\n          size: \"small\",\n          component: RouterLink,\n          to: `/tags/${t}`,\n          className: classes.footerTag,\n          clickable: true\n        }, t, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)), \"or\", \" \", user ? /*#__PURE__*/_jsxDEV(Link, {\n          component: RouterLink,\n          to: \"/ask\",\n          onClick: () => clearEdit(),\n          children: \"ask your own question.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(AuthFormModal, {\n          buttonType: \"link\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AnswerForm, \"6pn+QOH76fYMh5nRQa7rqgU5eQc=\", false, function () {\n  return [useQuesPageStyles, useAuthContext, useStateContext, useForm, useMutation];\n});\n\n_c = AnswerForm;\nexport default AnswerForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnswerForm\");","map":{"version":3,"sources":["C:/Projects/Hackathon/stack-underflow-master/client/src/components/AnswerForm.js"],"names":["useForm","Link","RouterLink","useMutation","POST_ANSWER","VIEW_QUESTION","useAuthContext","useStateContext","AuthFormModal","yup","yupResolver","getErrorMsg","Typography","Button","TextField","Chip","useQuesPageStyles","validationSchema","object","answerBody","string","min","AnswerForm","quesId","tags","classes","user","clearEdit","notify","register","handleSubmit","reset","errors","mode","resolver","addAnswer","loading","onError","err","postAnswer","variables","body","update","proxy","data","dataInCache","readQuery","query","updatedData","viewQuestion","answers","writeQuery","answerForm","message","marginTop","footerText","map","t","footerTag"],"mappings":"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","sourcesContent":["import { useForm } from \"react-hook-form\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { useMutation } from \"@apollo/client\";\nimport { POST_ANSWER } from \"../graphql/mutations\";\nimport { VIEW_QUESTION } from \"../graphql/queries\";\nimport { useAuthContext } from \"../context/auth\";\nimport { useStateContext } from \"../context/state\";\nimport AuthFormModal from \"../components/AuthFormModal\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { getErrorMsg } from \"../utils/helperFuncs\";\n\nimport { Typography, Button, TextField, Chip, Link } from \"@material-ui/core\";\nimport { useQuesPageStyles } from \"../styles/muiStyles\";\n\nconst validationSchema = yup.object({\n  answerBody: yup.string().min(30, \"Must be at least 30 characters\"),\n});\n\nconst AnswerForm = ({ quesId, tags }) => {\n  const classes = useQuesPageStyles();\n  const { user } = useAuthContext();\n  const { clearEdit, notify } = useStateContext();\n  const { register, handleSubmit, reset, errors } = useForm({\n    mode: \"onChange\",\n    resolver: yupResolver(validationSchema),\n  });\n\n  const [addAnswer, { loading }] = useMutation(POST_ANSWER, {\n    onError: (err) => {\n      notify(getErrorMsg(err), \"error\");\n    },\n  });\n\n  const postAnswer = ({ answerBody }) => {\n    addAnswer({\n      variables: { quesId, body: answerBody },\n      update: (proxy, { data }) => {\n        reset();\n\n        const dataInCache = proxy.readQuery({\n          query: VIEW_QUESTION,\n          variables: { quesId },\n        });\n\n        const updatedData = {\n          ...dataInCache.viewQuestion,\n          answers: data.postAnswer,\n        };\n\n        proxy.writeQuery({\n          query: VIEW_QUESTION,\n          variables: { quesId },\n          data: { viewQuestion: updatedData },\n        });\n\n        notify(\"Answer submitted!\");\n      },\n    });\n  };\n\n  return (\n    <div className={classes.answerForm}>\n      {user && (\n        <Typography variant=\"h6\" color=\"secondary\">\n          Your Answer\n        </Typography>\n      )}\n      {user && (\n        <form onSubmit={handleSubmit(postAnswer)}>\n          <TextField\n            inputRef={register}\n            name=\"answerBody\"\n            required\n            fullWidth\n            type=\"text\"\n            placeholder=\"Enter atleast 30 characters\"\n            variant=\"outlined\"\n            size=\"small\"\n            error={\"answerBody\" in errors}\n            helperText={\"answerBody\" in errors ? errors.answerBody.message : \"\"}\n            multiline\n            rows={5}\n          />\n          <div>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              style={{ marginTop: \"0.8em\" }}\n              type=\"submit\"\n              disabled={loading}\n            >\n              Post Your comment\n            </Button>\n          </div>\n        </form>\n      )}\n      <div className={classes.footerText}>\n        <span>\n          Browse other Ideas tagged{\" \"}\n          {tags.map((t) => (\n            <Chip\n              key={t}\n              label={t}\n              variant=\"outlined\"\n              color=\"primary\"\n              size=\"small\"\n              component={RouterLink}\n              to={`/tags/${t}`}\n              className={classes.footerTag}\n              clickable\n            />\n          ))}\n          or{\" \"}\n          {user ? (\n            <Link component={RouterLink} to=\"/ask\" onClick={() => clearEdit()}>\n              ask your own question.\n            </Link>\n          ) : (\n            <AuthFormModal buttonType=\"link\" />\n          )}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default AnswerForm;\n"]},"metadata":{},"sourceType":"module"}