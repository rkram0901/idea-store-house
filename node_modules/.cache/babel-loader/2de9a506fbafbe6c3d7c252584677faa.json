{"ast":null,"code":"import { gql } from '@apollo/client';\nimport { AUTHOR_DETAILS, COMMENT_DETAILS, ANSWER_DETAILS } from './fragments';\nexport const GET_QUESTIONS = gql`\n  query fetchQuestions(\n    $sortBy: SortByType!\n    $page: Int!\n    $limit: Int!\n    $filterByTag: String\n    $filterBySearch: String\n  ) {\n    getQuestions(\n      sortBy: $sortBy\n      page: $page\n      limit: $limit\n      filterByTag: $filterByTag\n      filterBySearch: $filterBySearch\n    ) {\n      next {\n        page\n      }\n      previous {\n        page\n      }\n      questions {\n        id\n        author {\n          ...AuthorDetails\n        }\n        title\n        body\n        tags\n        points\n        views\n        createdAt\n        updatedAt\n        answerCount\n      }\n    }\n  }\n  ${AUTHOR_DETAILS}\n`;\nexport const VIEW_QUESTION = gql`\n  query fetchQuestion($quesId: ID!) {\n    viewQuestion(quesId: $quesId) {\n      id\n      author {\n        ...AuthorDetails\n      }\n      title\n      body\n      tags\n      points\n      views\n      createdAt\n      updatedAt\n      answers {\n        ...AnswerDetails\n      }\n      author {\n        ...AuthorDetails\n      }\n      comments {\n        ...CommentDetails\n      }\n      acceptedAnswer\n      upvotedBy\n      downvotedBy\n    }\n  }\n\n  ${ANSWER_DETAILS}\n  ${COMMENT_DETAILS}\n  ${AUTHOR_DETAILS}\n`;\nexport const GET_USER = gql`\n  query fetchUser($username: String!) {\n    getUser(username: $username) {\n      id\n      username\n      role\n      createdAt\n      reputation\n      totalQuestions\n      totalAnswers\n      recentQuestions {\n        id\n        title\n        points\n        createdAt\n      }\n      recentAnswers {\n        id\n        title\n        points\n        createdAt\n      }\n    }\n  }\n`;\nexport const GET_ALL_TAGS = gql`\n  query {\n    getAllTags {\n      tagName\n      count\n    }\n  }\n`;\nexport const GET_ALL_USERS = gql`\n  query {\n    getAllUsers {\n      id\n      username\n      createdAt\n    }\n  }\n`;","map":{"version":3,"sources":["C:/Projects/Hackathon/stack-underflow-master/client/src/graphql/queries.js"],"names":["gql","AUTHOR_DETAILS","COMMENT_DETAILS","ANSWER_DETAILS","GET_QUESTIONS","VIEW_QUESTION","GET_USER","GET_ALL_TAGS","GET_ALL_USERS"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,cAAT,EAAyBC,eAAzB,EAA0CC,cAA1C,QAAgE,aAAhE;AAEA,OAAO,MAAMC,aAAa,GAAGJ,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,cAAe;AACnB,CAtCO;AAwCP,OAAO,MAAMI,aAAa,GAAGL,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIG,cAAe;AACnB,IAAID,eAAgB;AACpB,IAAID,cAAe;AACnB,CAhCO;AAkCP,OAAO,MAAMK,QAAQ,GAAGN,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAxBO;AA0BP,OAAO,MAAMO,YAAY,GAAGP,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,CAPO;AASP,OAAO,MAAMQ,aAAa,GAAGR,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARO","sourcesContent":["import { gql } from '@apollo/client';\nimport { AUTHOR_DETAILS, COMMENT_DETAILS, ANSWER_DETAILS } from './fragments';\n\nexport const GET_QUESTIONS = gql`\n  query fetchQuestions(\n    $sortBy: SortByType!\n    $page: Int!\n    $limit: Int!\n    $filterByTag: String\n    $filterBySearch: String\n  ) {\n    getQuestions(\n      sortBy: $sortBy\n      page: $page\n      limit: $limit\n      filterByTag: $filterByTag\n      filterBySearch: $filterBySearch\n    ) {\n      next {\n        page\n      }\n      previous {\n        page\n      }\n      questions {\n        id\n        author {\n          ...AuthorDetails\n        }\n        title\n        body\n        tags\n        points\n        views\n        createdAt\n        updatedAt\n        answerCount\n      }\n    }\n  }\n  ${AUTHOR_DETAILS}\n`;\n\nexport const VIEW_QUESTION = gql`\n  query fetchQuestion($quesId: ID!) {\n    viewQuestion(quesId: $quesId) {\n      id\n      author {\n        ...AuthorDetails\n      }\n      title\n      body\n      tags\n      points\n      views\n      createdAt\n      updatedAt\n      answers {\n        ...AnswerDetails\n      }\n      author {\n        ...AuthorDetails\n      }\n      comments {\n        ...CommentDetails\n      }\n      acceptedAnswer\n      upvotedBy\n      downvotedBy\n    }\n  }\n\n  ${ANSWER_DETAILS}\n  ${COMMENT_DETAILS}\n  ${AUTHOR_DETAILS}\n`;\n\nexport const GET_USER = gql`\n  query fetchUser($username: String!) {\n    getUser(username: $username) {\n      id\n      username\n      role\n      createdAt\n      reputation\n      totalQuestions\n      totalAnswers\n      recentQuestions {\n        id\n        title\n        points\n        createdAt\n      }\n      recentAnswers {\n        id\n        title\n        points\n        createdAt\n      }\n    }\n  }\n`;\n\nexport const GET_ALL_TAGS = gql`\n  query {\n    getAllTags {\n      tagName\n      count\n    }\n  }\n`;\n\nexport const GET_ALL_USERS = gql`\n  query {\n    getAllUsers {\n      id\n      username\n      createdAt\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}