{"ast":null,"code":"const sortAnswers = (sortBy, answers, acceptedAnswer) => {\n  if (sortBy === 'OLDEST') {\n    return [...answers].sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));\n  } else if (sortBy === 'NEWEST') {\n    return [...answers].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n  } else {\n    const accepted = answers.find(a => a.id === acceptedAnswer);\n    const restSorted = answers.filter(a => a.id !== acceptedAnswer).sort((a, b) => b.points - a.points);\n\n    if (accepted) {\n      return [accepted, ...restSorted];\n    } else {\n      return restSorted;\n    }\n  }\n};\n\nexport default sortAnswers;","map":{"version":3,"sources":["C:/Projects/Hackathon/stack-underflow-master/client/src/utils/sortAnswers.js"],"names":["sortAnswers","sortBy","answers","acceptedAnswer","sort","a","b","Date","createdAt","accepted","find","id","restSorted","filter","points"],"mappings":"AAAA,MAAMA,WAAW,GAAG,CAACC,MAAD,EAASC,OAAT,EAAkBC,cAAlB,KAAqC;AACvD,MAAIF,MAAM,KAAK,QAAf,EAAyB;AACvB,WAAO,CAAC,GAAGC,OAAJ,EAAaE,IAAb,CACL,CAACC,CAAD,EAAIC,CAAJ,KAAU,IAAIC,IAAJ,CAASF,CAAC,CAACG,SAAX,IAAwB,IAAID,IAAJ,CAASD,CAAC,CAACE,SAAX,CAD7B,CAAP;AAGD,GAJD,MAIO,IAAIP,MAAM,KAAK,QAAf,EAAyB;AAC9B,WAAO,CAAC,GAAGC,OAAJ,EAAaE,IAAb,CACL,CAACC,CAAD,EAAIC,CAAJ,KAAU,IAAIC,IAAJ,CAASD,CAAC,CAACE,SAAX,IAAwB,IAAID,IAAJ,CAASF,CAAC,CAACG,SAAX,CAD7B,CAAP;AAGD,GAJM,MAIA;AACL,UAAMC,QAAQ,GAAGP,OAAO,CAACQ,IAAR,CAAcL,CAAD,IAAOA,CAAC,CAACM,EAAF,KAASR,cAA7B,CAAjB;AACA,UAAMS,UAAU,GAAGV,OAAO,CACvBW,MADgB,CACRR,CAAD,IAAOA,CAAC,CAACM,EAAF,KAASR,cADP,EAEhBC,IAFgB,CAEX,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACQ,MAAF,GAAWT,CAAC,CAACS,MAFZ,CAAnB;;AAIA,QAAIL,QAAJ,EAAc;AACZ,aAAO,CAACA,QAAD,EAAW,GAAGG,UAAd,CAAP;AACD,KAFD,MAEO;AACL,aAAOA,UAAP;AACD;AACF;AACF,CArBD;;AAuBA,eAAeZ,WAAf","sourcesContent":["const sortAnswers = (sortBy, answers, acceptedAnswer) => {\n  if (sortBy === 'OLDEST') {\n    return [...answers].sort(\n      (a, b) => new Date(a.createdAt) - new Date(b.createdAt)\n    );\n  } else if (sortBy === 'NEWEST') {\n    return [...answers].sort(\n      (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\n    );\n  } else {\n    const accepted = answers.find((a) => a.id === acceptedAnswer);\n    const restSorted = answers\n      .filter((a) => a.id !== acceptedAnswer)\n      .sort((a, b) => b.points - a.points);\n\n    if (accepted) {\n      return [accepted, ...restSorted];\n    } else {\n      return restSorted;\n    }\n  }\n};\n\nexport default sortAnswers;\n"]},"metadata":{},"sourceType":"module"}