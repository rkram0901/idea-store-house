{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Projects\\\\Hackathon\\\\stack-underflow-master\\\\client\\\\src\\\\pages\\\\AskQuestionPage.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { useMutation } from \"@apollo/client\";\nimport { POST_QUESTION, EDIT_QUESTION } from \"../graphql/mutations\";\nimport { useStateContext } from \"../context/state\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { getErrorMsg } from \"../utils/helperFuncs\";\nimport { Typography, TextField, Button, InputAdornment, Chip } from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { useAskQuesPageStyles } from \"../styles/muiStyles\";\nconst validationSchema = yup.object({\n  title: yup.string().required(\"Required\").min(15, \"Must be at least 15 characters\"),\n  body: yup.string().required(\"Required\").min(30, \"Must be at least 30 characters\")\n});\n\nconst AskQuestionPage = () => {\n  _s();\n\n  const classes = useAskQuesPageStyles();\n  const history = useHistory();\n  const {\n    editValues,\n    clearEdit,\n    notify\n  } = useStateContext();\n  const [tagInput, setTagInput] = useState(\"\");\n  const [tags, setTags] = useState(editValues ? editValues.tags : []);\n  const [errorMsg, setErrorMsg] = useState(null);\n  const {\n    register,\n    handleSubmit,\n    reset,\n    errors\n  } = useForm({\n    defaultValues: {\n      title: editValues ? editValues.title : \"\",\n      body: editValues ? editValues.body : \"\"\n    },\n    mode: \"onChange\",\n    resolver: yupResolver(validationSchema)\n  });\n  const [addQuestion, {\n    loading: addQuesLoading\n  }] = useMutation(POST_QUESTION, {\n    onError: err => {\n      setErrorMsg(getErrorMsg(err));\n    }\n  });\n  const [updateQuestion, {\n    loading: editQuesLoading\n  }] = useMutation(EDIT_QUESTION, {\n    onError: err => {\n      setErrorMsg(getErrorMsg(err));\n    }\n  });\n\n  const postQuestion = ({\n    title,\n    body\n  }) => {\n    if (tags.length === 0) return setErrorMsg(\"Atleast one tag must be added.\");\n    addQuestion({\n      variables: {\n        title,\n        body,\n        tags\n      },\n      update: (_, {\n        data\n      }) => {\n        history.push(`/questions/${data.postQuestion.id}`);\n        reset();\n        notify(\"Question posted!\");\n      }\n    });\n  };\n\n  const editQuestion = ({\n    title,\n    body\n  }) => {\n    if (tags.length === 0) return setErrorMsg(\"Atleast one tag must be added.\");\n    updateQuestion({\n      variables: {\n        quesId: editValues.quesId,\n        title,\n        body,\n        tags\n      },\n      update: (_, {\n        data\n      }) => {\n        history.push(`/questions/${data.editQuestion.id}`);\n        clearEdit();\n        notify(\"Question edited!\");\n      }\n    });\n  };\n\n  const handleTags = e => {\n    if (!e || !e.target.value && e.target.value !== \"\") return;\n    const value = e.target.value.toLowerCase().trim();\n    setTagInput(value);\n    const keyCode = e.target.value.charAt(e.target.selectionStart - 1).charCodeAt();\n\n    if (keyCode === 32 && value.trim() !== \"\") {\n      if (tags.includes(value)) return setErrorMsg(\"Duplicate tag found! You can't add the same tag twice.\");\n\n      if (!/^[a-zA-Z0-9-]*$/.test(value)) {\n        return setErrorMsg(\"Only alphanumeric characters & dash are allowed.\");\n      }\n\n      if (tags.length >= 5) {\n        setTagInput(\"\");\n        return setErrorMsg(\"Max 5 tags can be added! Not more than that.\");\n      }\n\n      if (value.length > 15) {\n        return setErrorMsg(\"A single tag can't have more than 15 characters.\");\n      }\n\n      setTags(prevTags => [...prevTags, value]);\n      setTagInput(\"\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      color: \"secondary\",\n      children: editValues ? \"Edit Your Idea\" : \"Add an Idea\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.quesForm,\n      onSubmit: editValues ? handleSubmit(editQuestion) : handleSubmit(postQuestion),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.inputWrapper,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          color: \"secondary\",\n          children: \"Be specific and imagine you\\u2019re asking a question to another person\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          required: true,\n          fullWidth: true,\n          inputRef: register,\n          name: \"idea title\",\n          placeholder: \"Enter atleast 15 characters\",\n          type: \"text\",\n          label: \"Title\",\n          variant: \"outlined\",\n          size: \"small\",\n          error: \"title\" in errors,\n          helperText: \"title\" in errors ? errors.title.message : \"\",\n          className: classes.inputField,\n          InputProps: {\n            startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"start\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 17\n            }, this)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.inputWrapper,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          color: \"secondary\",\n          children: \"Include all the information someone would need to answer your question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          required: true,\n          multiline: true,\n          rows: 5,\n          fullWidth: true,\n          inputRef: register,\n          name: \"body\",\n          placeholder: \"Enter atleast 30 characters\",\n          type: \"text\",\n          label: \"Body\",\n          variant: \"outlined\",\n          size: \"small\",\n          error: \"body\" in errors,\n          helperText: \"body\" in errors ? errors.body.message : \"\",\n          className: classes.inputField,\n          InputProps: {\n            startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"start\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 17\n            }, this)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.inputWrapper,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          color: \"secondary\",\n          children: \"Add up to 5 tags to describe what your question is about\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n          multiple: true,\n          freeSolo: true,\n          options: [],\n          getOptionLabel: option => option,\n          value: tags,\n          inputValue: tagInput,\n          onInputChange: handleTags,\n          onChange: (e, value, reason) => {\n            setTags(value);\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            variant: \"outlined\",\n            label: \"Tags\",\n            placeholder: \"Enter space button to add tags\",\n            onKeyDown: handleTags,\n            fullWidth: true,\n            className: classes.inputField,\n            size: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this),\n          renderTags: (value, getTagProps) => value.map((option, index) => /*#__PURE__*/_jsxDEV(Chip, {\n            variant: \"outlined\",\n            label: option,\n            color: \"primary\",\n            size: \"small\",\n            ...getTagProps({\n              index\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        color: \"primary\",\n        variant: \"contained\",\n        size: \"large\",\n        className: classes.submitBtn,\n        disabled: addQuesLoading || editQuesLoading,\n        children: editValues ? \"Update Your Question\" : \"Post Your Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        errorMsg: errorMsg,\n        clearErrorMsg: () => setErrorMsg(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AskQuestionPage, \"tcUdEPKsE9NmvcV8gMS0sYCOI5A=\", false, function () {\n  return [useAskQuesPageStyles, useHistory, useStateContext, useForm, useMutation, useMutation];\n});\n\n_c = AskQuestionPage;\nexport default AskQuestionPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"AskQuestionPage\");","map":{"version":3,"sources":["C:/Projects/Hackathon/stack-underflow-master/client/src/pages/AskQuestionPage.js"],"names":["useState","useHistory","useForm","useMutation","POST_QUESTION","EDIT_QUESTION","useStateContext","ErrorMessage","yup","yupResolver","getErrorMsg","Typography","TextField","Button","InputAdornment","Chip","Autocomplete","useAskQuesPageStyles","validationSchema","object","title","string","required","min","body","AskQuestionPage","classes","history","editValues","clearEdit","notify","tagInput","setTagInput","tags","setTags","errorMsg","setErrorMsg","register","handleSubmit","reset","errors","defaultValues","mode","resolver","addQuestion","loading","addQuesLoading","onError","err","updateQuestion","editQuesLoading","postQuestion","length","variables","update","_","data","push","id","editQuestion","quesId","handleTags","e","target","value","toLowerCase","trim","keyCode","charAt","selectionStart","charCodeAt","includes","test","prevTags","root","quesForm","inputWrapper","message","inputField","startAdornment","option","reason","params","getTagProps","map","index","submitBtn"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { useMutation } from \"@apollo/client\";\nimport { POST_QUESTION, EDIT_QUESTION } from \"../graphql/mutations\";\nimport { useStateContext } from \"../context/state\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { getErrorMsg } from \"../utils/helperFuncs\";\n\nimport {\n  Typography,\n  TextField,\n  Button,\n  InputAdornment,\n  Chip,\n} from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { useAskQuesPageStyles } from \"../styles/muiStyles\";\n\nconst validationSchema = yup.object({\n  title: yup\n    .string()\n    .required(\"Required\")\n    .min(15, \"Must be at least 15 characters\"),\n  body: yup\n    .string()\n    .required(\"Required\")\n    .min(30, \"Must be at least 30 characters\"),\n});\n\nconst AskQuestionPage = () => {\n  const classes = useAskQuesPageStyles();\n  const history = useHistory();\n  const { editValues, clearEdit, notify } = useStateContext();\n  const [tagInput, setTagInput] = useState(\"\");\n  const [tags, setTags] = useState(editValues ? editValues.tags : []);\n  const [errorMsg, setErrorMsg] = useState(null);\n  const { register, handleSubmit, reset, errors } = useForm({\n    defaultValues: {\n      title: editValues ? editValues.title : \"\",\n      body: editValues ? editValues.body : \"\",\n    },\n    mode: \"onChange\",\n    resolver: yupResolver(validationSchema),\n  });\n\n  const [addQuestion, { loading: addQuesLoading }] = useMutation(\n    POST_QUESTION,\n    {\n      onError: (err) => {\n        setErrorMsg(getErrorMsg(err));\n      },\n    }\n  );\n\n  const [updateQuestion, { loading: editQuesLoading }] = useMutation(\n    EDIT_QUESTION,\n    {\n      onError: (err) => {\n        setErrorMsg(getErrorMsg(err));\n      },\n    }\n  );\n\n  const postQuestion = ({ title, body }) => {\n    if (tags.length === 0) return setErrorMsg(\"Atleast one tag must be added.\");\n\n    addQuestion({\n      variables: { title, body, tags },\n      update: (_, { data }) => {\n        history.push(`/questions/${data.postQuestion.id}`);\n        reset();\n        notify(\"Question posted!\");\n      },\n    });\n  };\n\n  const editQuestion = ({ title, body }) => {\n    if (tags.length === 0) return setErrorMsg(\"Atleast one tag must be added.\");\n\n    updateQuestion({\n      variables: { quesId: editValues.quesId, title, body, tags },\n      update: (_, { data }) => {\n        history.push(`/questions/${data.editQuestion.id}`);\n        clearEdit();\n        notify(\"Question edited!\");\n      },\n    });\n  };\n\n  const handleTags = (e) => {\n    if (!e || (!e.target.value && e.target.value !== \"\")) return;\n    const value = e.target.value.toLowerCase().trim();\n    setTagInput(value);\n\n    const keyCode = e.target.value\n      .charAt(e.target.selectionStart - 1)\n      .charCodeAt();\n\n    if (keyCode === 32 && value.trim() !== \"\") {\n      if (tags.includes(value))\n        return setErrorMsg(\n          \"Duplicate tag found! You can't add the same tag twice.\"\n        );\n\n      if (!/^[a-zA-Z0-9-]*$/.test(value)) {\n        return setErrorMsg(\"Only alphanumeric characters & dash are allowed.\");\n      }\n\n      if (tags.length >= 5) {\n        setTagInput(\"\");\n        return setErrorMsg(\"Max 5 tags can be added! Not more than that.\");\n      }\n\n      if (value.length > 15) {\n        return setErrorMsg(\"A single tag can't have more than 15 characters.\");\n      }\n\n      setTags((prevTags) => [...prevTags, value]);\n      setTagInput(\"\");\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h5\" color=\"secondary\">\n        {editValues ? \"Edit Your Idea\" : \"Add an Idea\"}\n      </Typography>\n      <form\n        className={classes.quesForm}\n        onSubmit={\n          editValues ? handleSubmit(editQuestion) : handleSubmit(postQuestion)\n        }\n      >\n        <div className={classes.inputWrapper}>\n          <Typography variant=\"caption\" color=\"secondary\">\n            Be specific and imagine you’re asking a question to another person\n          </Typography>\n          <TextField\n            required\n            fullWidth\n            inputRef={register}\n            name=\"idea title\"\n            placeholder=\"Enter atleast 15 characters\"\n            type=\"text\"\n            label=\"Title\"\n            variant=\"outlined\"\n            size=\"small\"\n            error={\"title\" in errors}\n            helperText={\"title\" in errors ? errors.title.message : \"\"}\n            className={classes.inputField}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <div></div>\n                </InputAdornment>\n              ),\n            }}\n          />\n        </div>\n        <div className={classes.inputWrapper}>\n          <Typography variant=\"caption\" color=\"secondary\">\n            Include all the information someone would need to answer your\n            question\n          </Typography>\n          <TextField\n            required\n            multiline\n            rows={5}\n            fullWidth\n            inputRef={register}\n            name=\"body\"\n            placeholder=\"Enter atleast 30 characters\"\n            type=\"text\"\n            label=\"Body\"\n            variant=\"outlined\"\n            size=\"small\"\n            error={\"body\" in errors}\n            helperText={\"body\" in errors ? errors.body.message : \"\"}\n            className={classes.inputField}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <div></div>\n                </InputAdornment>\n              ),\n            }}\n          />\n        </div>\n        <div className={classes.inputWrapper}>\n          <Typography variant=\"caption\" color=\"secondary\">\n            Add up to 5 tags to describe what your question is about\n          </Typography>\n          <Autocomplete\n            multiple\n            freeSolo\n            options={[]}\n            getOptionLabel={(option) => option}\n            value={tags}\n            inputValue={tagInput}\n            onInputChange={handleTags}\n            onChange={(e, value, reason) => {\n              setTags(value);\n            }}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                variant=\"outlined\"\n                label=\"Tags\"\n                placeholder=\"Enter space button to add tags\"\n                onKeyDown={handleTags}\n                fullWidth\n                className={classes.inputField}\n                size=\"small\"\n              />\n            )}\n            renderTags={(value, getTagProps) =>\n              value.map((option, index) => (\n                <Chip\n                  variant=\"outlined\"\n                  label={option}\n                  color=\"primary\"\n                  size=\"small\"\n                  {...getTagProps({ index })}\n                />\n              ))\n            }\n          />\n        </div>\n        <Button\n          type=\"submit\"\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          className={classes.submitBtn}\n          disabled={addQuesLoading || editQuesLoading}\n        >\n          {editValues ? \"Update Your Question\" : \"Post Your Question\"}\n        </Button>\n        <ErrorMessage\n          errorMsg={errorMsg}\n          clearErrorMsg={() => setErrorMsg(null)}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default AskQuestionPage;\n"]},"metadata":{},"sourceType":"module"}