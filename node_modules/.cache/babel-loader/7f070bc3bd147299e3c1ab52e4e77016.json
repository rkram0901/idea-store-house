{"ast":null,"code":"import { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from 'apollo-link-context';\nimport storage from './utils/localStorage';\nimport backendUrl from './backendUrl';\nconst httpLink = new HttpLink({\n  uri: backendUrl\n});\nconst authLink = setContext(() => {\n  const loggedUser = storage.loadUser();\n  return {\n    headers: {\n      authorization: loggedUser ? loggedUser.token : null\n    }\n  };\n});\nconst client = new ApolloClient({\n  cache: new InMemoryCache({\n    typePolicies: {\n      Question: {\n        fields: {\n          upvotedBy: {\n            merge(existing, incoming) {\n              return incoming;\n            }\n\n          },\n          downvotedBy: {\n            merge(existing, incoming) {\n              return incoming;\n            }\n\n          },\n          comments: {\n            merge(existing, incoming) {\n              return incoming;\n            }\n\n          },\n          answers: {\n            merge(existing, incoming) {\n              return incoming;\n            }\n\n          },\n          tags: {\n            merge(existing, incoming) {\n              return incoming;\n            }\n\n          }\n        }\n      },\n      Answer: {\n        fields: {\n          upvotedBy: {\n            merge(existing, incoming) {\n              return incoming;\n            }\n\n          },\n          downvotedBy: {\n            merge(existing, incoming) {\n              return incoming;\n            }\n\n          },\n          comments: {\n            merge(existing, incoming) {\n              return incoming;\n            }\n\n          }\n        }\n      }\n    }\n  }),\n  link: authLink.concat(httpLink)\n});\nexport default client;","map":{"version":3,"sources":["C:/Projects/Hackathon/stack-underflow-master/client/src/apolloClient.js"],"names":["ApolloClient","HttpLink","InMemoryCache","setContext","storage","backendUrl","httpLink","uri","authLink","loggedUser","loadUser","headers","authorization","token","client","cache","typePolicies","Question","fields","upvotedBy","merge","existing","incoming","downvotedBy","comments","answers","tags","Answer","link","concat"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,QAAsD,gBAAtD;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,MAAMC,QAAQ,GAAG,IAAIL,QAAJ,CAAa;AAC5BM,EAAAA,GAAG,EAAEF;AADuB,CAAb,CAAjB;AAIA,MAAMG,QAAQ,GAAGL,UAAU,CAAC,MAAM;AAChC,QAAMM,UAAU,GAAGL,OAAO,CAACM,QAAR,EAAnB;AAEA,SAAO;AACLC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAEH,UAAU,GAAGA,UAAU,CAACI,KAAd,GAAsB;AADxC;AADJ,GAAP;AAKD,CAR0B,CAA3B;AAUA,MAAMC,MAAM,GAAG,IAAId,YAAJ,CAAiB;AAC9Be,EAAAA,KAAK,EAAE,IAAIb,aAAJ,CAAkB;AACvBc,IAAAA,YAAY,EAAE;AACZC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,MAAM,EAAE;AACNC,UAAAA,SAAS,EAAE;AACTC,YAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxB,qBAAOA,QAAP;AACD;;AAHQ,WADL;AAMNC,UAAAA,WAAW,EAAE;AACXH,YAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxB,qBAAOA,QAAP;AACD;;AAHU,WANP;AAWNE,UAAAA,QAAQ,EAAE;AACRJ,YAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxB,qBAAOA,QAAP;AACD;;AAHO,WAXJ;AAgBNG,UAAAA,OAAO,EAAE;AACPL,YAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxB,qBAAOA,QAAP;AACD;;AAHM,WAhBH;AAqBNI,UAAAA,IAAI,EAAE;AACJN,YAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxB,qBAAOA,QAAP;AACD;;AAHG;AArBA;AADA,OADE;AA8BZK,MAAAA,MAAM,EAAE;AACNT,QAAAA,MAAM,EAAE;AACNC,UAAAA,SAAS,EAAE;AACTC,YAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxB,qBAAOA,QAAP;AACD;;AAHQ,WADL;AAMNC,UAAAA,WAAW,EAAE;AACXH,YAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxB,qBAAOA,QAAP;AACD;;AAHU,WANP;AAWNE,UAAAA,QAAQ,EAAE;AACRJ,YAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxB,qBAAOA,QAAP;AACD;;AAHO;AAXJ;AADF;AA9BI;AADS,GAAlB,CADuB;AAqD9BM,EAAAA,IAAI,EAAEpB,QAAQ,CAACqB,MAAT,CAAgBvB,QAAhB;AArDwB,CAAjB,CAAf;AAwDA,eAAeQ,MAAf","sourcesContent":["import { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from 'apollo-link-context';\nimport storage from './utils/localStorage';\nimport backendUrl from './backendUrl';\n\nconst httpLink = new HttpLink({\n  uri: backendUrl,\n});\n\nconst authLink = setContext(() => {\n  const loggedUser = storage.loadUser();\n\n  return {\n    headers: {\n      authorization: loggedUser ? loggedUser.token : null,\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache({\n    typePolicies: {\n      Question: {\n        fields: {\n          upvotedBy: {\n            merge(existing, incoming) {\n              return incoming;\n            },\n          },\n          downvotedBy: {\n            merge(existing, incoming) {\n              return incoming;\n            },\n          },\n          comments: {\n            merge(existing, incoming) {\n              return incoming;\n            },\n          },\n          answers: {\n            merge(existing, incoming) {\n              return incoming;\n            },\n          },\n          tags: {\n            merge(existing, incoming) {\n              return incoming;\n            },\n          },\n        },\n      },\n      Answer: {\n        fields: {\n          upvotedBy: {\n            merge(existing, incoming) {\n              return incoming;\n            },\n          },\n          downvotedBy: {\n            merge(existing, incoming) {\n              return incoming;\n            },\n          },\n          comments: {\n            merge(existing, incoming) {\n              return incoming;\n            },\n          },\n        },\n      },\n    },\n  }),\n  link: authLink.concat(httpLink),\n});\n\nexport default client;\n"]},"metadata":{},"sourceType":"module"}