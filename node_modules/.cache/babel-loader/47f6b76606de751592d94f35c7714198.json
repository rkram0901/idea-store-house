{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Projects\\\\Hackathon\\\\stack-underflow-master\\\\client\\\\src\\\\components\\\\RegisterForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useMutation } from '@apollo/client';\nimport { REGISTER_USER } from '../graphql/mutations';\nimport { useAuthContext } from '../context/auth';\nimport { useStateContext } from '../context/state';\nimport ErrorMessage from './ErrorMessage';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport SofLogo from \"../svg/stack-overflow.svg\";\nimport { getErrorMsg } from '../utils/helperFuncs';\nimport { TextField, Button, Typography, InputAdornment, IconButton, Link } from '@material-ui/core';\nimport { useAuthFormStyles } from '../styles/muiStyles';\nimport PersonIcon from '@material-ui/icons/Person';\nimport LockIcon from '@material-ui/icons/Lock';\nimport EnhancedEncryptionIcon from '@material-ui/icons/EnhancedEncryption';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nconst validationSchema = yup.object({\n  username: yup.string().required('Required').max(20, 'Must be at most 20 characters').min(3, 'Must be at least 3 characters').matches(/^[a-zA-Z0-9-_]*$/, 'Only alphanum, dash & underscore characters are allowed'),\n  password: yup.string().required('Required').min(6, 'Must be at least 6 characters'),\n  confirmPassword: yup.string().required('Required').min(6, 'Must be at least 6 characters')\n});\n\nconst RegisterForm = ({\n  setAuthType,\n  closeModal\n}) => {\n  _s();\n\n  const [showPass, setShowPass] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(null);\n  const [showConfPass, setShowConfPass] = useState(false);\n  const classes = useAuthFormStyles();\n  const {\n    setUser\n  } = useAuthContext();\n  const {\n    notify\n  } = useStateContext();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    errors\n  } = useForm({\n    mode: 'onTouched',\n    resolver: yupResolver(validationSchema)\n  });\n  const [registerUser, {\n    loading\n  }] = useMutation(REGISTER_USER, {\n    onError: err => {\n      setErrorMsg(getErrorMsg(err));\n    }\n  });\n\n  const onRegister = ({\n    username,\n    password,\n    confirmPassword\n  }) => {\n    if (password !== confirmPassword) return setErrorMsg('Both passwords need to match.');\n    registerUser({\n      variables: {\n        username,\n        password\n      },\n      update: (_, {\n        data\n      }) => {\n        setUser(data.register);\n        notify(`Welcome, ${data.register.username}! You've successfully registered.`);\n        reset();\n        closeModal();\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: SofLogo,\n      alt: \"sof-logo\",\n      className: classes.titleLogo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onRegister),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.inputField,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          required: true,\n          fullWidth: true,\n          inputRef: register,\n          name: \"username\",\n          type: \"text\",\n          label: \"Username\",\n          variant: \"outlined\",\n          size: \"small\",\n          error: 'username' in errors,\n          helperText: 'username' in errors ? errors.username.message : '',\n          InputProps: {\n            startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"start\",\n              children: /*#__PURE__*/_jsxDEV(PersonIcon, {\n                color: \"primary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.inputField,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          required: true,\n          fullWidth: true,\n          inputRef: register,\n          name: \"password\",\n          type: showPass ? 'text' : 'password',\n          label: \"Password\",\n          variant: \"outlined\",\n          size: \"small\",\n          error: 'password' in errors,\n          helperText: 'password' in errors ? errors.password.message : '',\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => setShowPass(prevState => !prevState),\n                size: \"small\",\n                children: showPass ? /*#__PURE__*/_jsxDEV(VisibilityOffIcon, {\n                  color: \"secondary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 129,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(VisibilityIcon, {\n                  color: \"secondary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this),\n            startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"start\",\n              children: /*#__PURE__*/_jsxDEV(LockIcon, {\n                color: \"primary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.inputField,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          required: true,\n          fullWidth: true,\n          inputRef: register,\n          name: \"confirmPassword\",\n          type: showConfPass ? 'text' : 'password',\n          label: \"Confirm Password\",\n          variant: \"outlined\",\n          size: \"small\",\n          error: 'confirmPassword' in errors,\n          helperText: 'confirmPassword' in errors ? errors.confirmPassword.message : '',\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => setShowConfPass(prevState => !prevState),\n                size: \"small\",\n                children: showConfPass ? /*#__PURE__*/_jsxDEV(VisibilityOffIcon, {\n                  color: \"secondary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(VisibilityIcon, {\n                  color: \"secondary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 17\n            }, this),\n            startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"start\",\n              children: /*#__PURE__*/_jsxDEV(EnhancedEncryptionIcon, {\n                color: \"primary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        size: \"large\",\n        fullWidth: true,\n        startIcon: /*#__PURE__*/_jsxDEV(PersonAddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 22\n        }, this),\n        type: \"submit\",\n        disabled: loading,\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      className: classes.footerText,\n      children: [\"Already have an account?\", ' ', /*#__PURE__*/_jsxDEV(Link, {\n        onClick: () => setAuthType('login'),\n        className: classes.link,\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      errorMsg: errorMsg,\n      clearErrorMsg: () => setErrorMsg(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegisterForm, \"YO3fSyTjwWYzq3g9ZSoAxkx4Sco=\", false, function () {\n  return [useAuthFormStyles, useAuthContext, useStateContext, useForm, useMutation];\n});\n\n_c = RegisterForm;\nexport default RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"sources":["C:/Projects/Hackathon/stack-underflow-master/client/src/components/RegisterForm.js"],"names":["useState","useForm","useMutation","REGISTER_USER","useAuthContext","useStateContext","ErrorMessage","yup","yupResolver","getErrorMsg","TextField","Button","Typography","InputAdornment","IconButton","Link","useAuthFormStyles","PersonIcon","LockIcon","EnhancedEncryptionIcon","PersonAddIcon","VisibilityOffIcon","VisibilityIcon","validationSchema","object","username","string","required","max","min","matches","password","confirmPassword","RegisterForm","setAuthType","closeModal","showPass","setShowPass","errorMsg","setErrorMsg","showConfPass","setShowConfPass","classes","setUser","notify","register","handleSubmit","reset","errors","mode","resolver","registerUser","loading","onError","err","onRegister","variables","update","_","data","root","SofLogo","titleLogo","inputField","message","startAdornment","endAdornment","prevState","footerText","link"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useMutation } from '@apollo/client';\nimport { REGISTER_USER } from '../graphql/mutations';\nimport { useAuthContext } from '../context/auth';\nimport { useStateContext } from '../context/state';\nimport ErrorMessage from './ErrorMessage';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport SofLogo from '../svg/stack-overflow.svg';\nimport { getErrorMsg } from '../utils/helperFuncs';\n\nimport {\n  TextField,\n  Button,\n  Typography,\n  InputAdornment,\n  IconButton,\n  Link,\n} from '@material-ui/core';\nimport { useAuthFormStyles } from '../styles/muiStyles';\nimport PersonIcon from '@material-ui/icons/Person';\nimport LockIcon from '@material-ui/icons/Lock';\nimport EnhancedEncryptionIcon from '@material-ui/icons/EnhancedEncryption';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\n\nconst validationSchema = yup.object({\n  username: yup\n    .string()\n    .required('Required')\n    .max(20, 'Must be at most 20 characters')\n    .min(3, 'Must be at least 3 characters')\n    .matches(\n      /^[a-zA-Z0-9-_]*$/,\n      'Only alphanum, dash & underscore characters are allowed'\n    ),\n  password: yup\n    .string()\n    .required('Required')\n    .min(6, 'Must be at least 6 characters'),\n  confirmPassword: yup\n    .string()\n    .required('Required')\n    .min(6, 'Must be at least 6 characters'),\n});\n\nconst RegisterForm = ({ setAuthType, closeModal }) => {\n  const [showPass, setShowPass] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(null);\n  const [showConfPass, setShowConfPass] = useState(false);\n  const classes = useAuthFormStyles();\n  const { setUser } = useAuthContext();\n  const { notify } = useStateContext();\n  const { register, handleSubmit, reset, errors } = useForm({\n    mode: 'onTouched',\n    resolver: yupResolver(validationSchema),\n  });\n\n  const [registerUser, { loading }] = useMutation(REGISTER_USER, {\n    onError: (err) => {\n      setErrorMsg(getErrorMsg(err));\n    },\n  });\n\n  const onRegister = ({ username, password, confirmPassword }) => {\n    if (password !== confirmPassword)\n      return setErrorMsg('Both passwords need to match.');\n\n    registerUser({\n      variables: { username, password },\n      update: (_, { data }) => {\n        setUser(data.register);\n        notify(\n          `Welcome, ${data.register.username}! You've successfully registered.`\n        );\n        reset();\n        closeModal();\n      },\n    });\n  };\n\n  return (\n    <div className={classes.root}>\n      <img src={SofLogo} alt=\"sof-logo\" className={classes.titleLogo} />\n      <form onSubmit={handleSubmit(onRegister)}>\n        <div className={classes.inputField}>\n          <TextField\n            required\n            fullWidth\n            inputRef={register}\n            name=\"username\"\n            type=\"text\"\n            label=\"Username\"\n            variant=\"outlined\"\n            size=\"small\"\n            error={'username' in errors}\n            helperText={'username' in errors ? errors.username.message : ''}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <PersonIcon color=\"primary\" />\n                </InputAdornment>\n              ),\n            }}\n          />\n        </div>\n        <div className={classes.inputField}>\n          <TextField\n            required\n            fullWidth\n            inputRef={register}\n            name=\"password\"\n            type={showPass ? 'text' : 'password'}\n            label=\"Password\"\n            variant=\"outlined\"\n            size=\"small\"\n            error={'password' in errors}\n            helperText={'password' in errors ? errors.password.message : ''}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    onClick={() => setShowPass((prevState) => !prevState)}\n                    size=\"small\"\n                  >\n                    {showPass ? (\n                      <VisibilityOffIcon color=\"secondary\" />\n                    ) : (\n                      <VisibilityIcon color=\"secondary\" />\n                    )}\n                  </IconButton>\n                </InputAdornment>\n              ),\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <LockIcon color=\"primary\" />\n                </InputAdornment>\n              ),\n            }}\n          />\n        </div>\n        <div className={classes.inputField}>\n          <TextField\n            required\n            fullWidth\n            inputRef={register}\n            name=\"confirmPassword\"\n            type={showConfPass ? 'text' : 'password'}\n            label=\"Confirm Password\"\n            variant=\"outlined\"\n            size=\"small\"\n            error={'confirmPassword' in errors}\n            helperText={\n              'confirmPassword' in errors ? errors.confirmPassword.message : ''\n            }\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    onClick={() => setShowConfPass((prevState) => !prevState)}\n                    size=\"small\"\n                  >\n                    {showConfPass ? (\n                      <VisibilityOffIcon color=\"secondary\" />\n                    ) : (\n                      <VisibilityIcon color=\"secondary\" />\n                    )}\n                  </IconButton>\n                </InputAdornment>\n              ),\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <EnhancedEncryptionIcon color=\"primary\" />\n                </InputAdornment>\n              ),\n            }}\n          />\n        </div>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          fullWidth\n          startIcon={<PersonAddIcon />}\n          type=\"submit\"\n          disabled={loading}\n        >\n          Sign Up\n        </Button>\n      </form>\n      <Typography variant=\"body1\" className={classes.footerText}>\n        Already have an account?{' '}\n        <Link onClick={() => setAuthType('login')} className={classes.link}>\n          Log In\n        </Link>\n      </Typography>\n      <ErrorMessage\n        errorMsg={errorMsg}\n        clearErrorMsg={() => setErrorMsg(null)}\n      />\n    </div>\n  );\n};\n\nexport default RegisterForm;\n"]},"metadata":{},"sourceType":"module"}