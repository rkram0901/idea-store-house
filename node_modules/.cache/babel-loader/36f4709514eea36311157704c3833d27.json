{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Projects\\\\Hackathon\\\\stack-underflow-master\\\\client\\\\src\\\\pages\\\\QuestionPage.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useParams, Link as RouterLink } from 'react-router-dom';\nimport { useLazyQuery } from '@apollo/client';\nimport { VIEW_QUESTION } from '../graphql/queries';\nimport { useStateContext } from '../context/state';\nimport { useAuthContext } from '../context/auth';\nimport QuesPageContent from '../components/QuesPageContent';\nimport RightSidePanel from '../components/RightSidePanel';\nimport AuthFormModal from '../components/AuthFormModal';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport { formatDateAgo, getErrorMsg } from '../utils/helperFuncs';\nimport { Typography, Button, Divider, Grid, useMediaQuery } from '@material-ui/core';\nimport { useQuesPageStyles } from '../styles/muiStyles';\nimport { useTheme } from '@material-ui/core/styles';\n\nconst QuestionPage = () => {\n  _s();\n\n  const {\n    clearEdit,\n    notify\n  } = useStateContext();\n  const {\n    user\n  } = useAuthContext();\n  const {\n    quesId\n  } = useParams();\n  const [question, setQuestion] = useState(null);\n  const classes = useQuesPageStyles();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n  const [fetchQuestion, {\n    data,\n    loading\n  }] = useLazyQuery(VIEW_QUESTION, {\n    onError: err => {\n      notify(getErrorMsg(err), 'error');\n    }\n  });\n  useEffect(() => {\n    fetchQuestion({\n      variables: {\n        quesId\n      }\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [quesId]);\n  useEffect(() => {\n    if (data) {\n      setQuestion(data.viewQuestion);\n    }\n  }, [data]);\n\n  if (loading || !question) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        minWidth: '100%',\n        marginTop: '20%'\n      },\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n        size: 80\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n  const {\n    title,\n    views,\n    createdAt,\n    updatedAt\n  } = question;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.topBar,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.titleWrapper,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: isMobile ? 'h6' : 'h5',\n          color: \"secondary\",\n          style: {\n            wordWrap: 'anywhere'\n          },\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), user ? /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          size: isMobile ? 'small' : 'medium',\n          component: RouterLink,\n          to: \"/ask\",\n          onClick: () => clearEdit(),\n          style: {\n            minWidth: '9em'\n          },\n          children: \"Ask Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(AuthFormModal, {\n          buttonType: \"ask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.quesInfo,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          style: {\n            marginRight: 10\n          },\n          children: [\"Asked \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [formatDateAgo(createdAt), \" ago\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), createdAt !== updatedAt && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          style: {\n            marginRight: 10\n          },\n          children: [\"Edited \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [formatDateAgo(updatedAt), \" ago\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          children: [\"Viewed \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [views, \" times\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 20\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\",\n      wrap: \"nowrap\",\n      justify: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(QuesPageContent, {\n        question: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RightSidePanel, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuestionPage, \"UVxe6xRsrhFlM/LBDUaJwZp/xJA=\", false, function () {\n  return [useStateContext, useAuthContext, useParams, useQuesPageStyles, useTheme, useMediaQuery, useLazyQuery];\n});\n\n_c = QuestionPage;\nexport default QuestionPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"sources":["C:/Projects/Hackathon/stack-underflow-master/client/src/pages/QuestionPage.js"],"names":["useState","useEffect","useParams","Link","RouterLink","useLazyQuery","VIEW_QUESTION","useStateContext","useAuthContext","QuesPageContent","RightSidePanel","AuthFormModal","LoadingSpinner","formatDateAgo","getErrorMsg","Typography","Button","Divider","Grid","useMediaQuery","useQuesPageStyles","useTheme","QuestionPage","clearEdit","notify","user","quesId","question","setQuestion","classes","theme","isMobile","breakpoints","down","fetchQuestion","data","loading","onError","err","variables","viewQuestion","minWidth","marginTop","title","views","createdAt","updatedAt","root","topBar","titleWrapper","wordWrap","quesInfo","marginRight"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams, Link as RouterLink } from 'react-router-dom';\nimport { useLazyQuery } from '@apollo/client';\nimport { VIEW_QUESTION } from '../graphql/queries';\nimport { useStateContext } from '../context/state';\nimport { useAuthContext } from '../context/auth';\nimport QuesPageContent from '../components/QuesPageContent';\nimport RightSidePanel from '../components/RightSidePanel';\nimport AuthFormModal from '../components/AuthFormModal';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport { formatDateAgo, getErrorMsg } from '../utils/helperFuncs';\n\nimport {\n  Typography,\n  Button,\n  Divider,\n  Grid,\n  useMediaQuery,\n} from '@material-ui/core';\nimport { useQuesPageStyles } from '../styles/muiStyles';\nimport { useTheme } from '@material-ui/core/styles';\n\nconst QuestionPage = () => {\n  const { clearEdit, notify } = useStateContext();\n  const { user } = useAuthContext();\n  const { quesId } = useParams();\n  const [question, setQuestion] = useState(null);\n  const classes = useQuesPageStyles();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n  const [fetchQuestion, { data, loading }] = useLazyQuery(VIEW_QUESTION, {\n    onError: (err) => {\n      notify(getErrorMsg(err), 'error');\n    },\n  });\n\n  useEffect(() => {\n    fetchQuestion({ variables: { quesId } });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [quesId]);\n\n  useEffect(() => {\n    if (data) {\n      setQuestion(data.viewQuestion);\n    }\n  }, [data]);\n\n  if (loading || !question) {\n    return (\n      <div style={{ minWidth: '100%', marginTop: '20%' }}>\n        <LoadingSpinner size={80} />\n      </div>\n    );\n  }\n\n  const { title, views, createdAt, updatedAt } = question;\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.topBar}>\n        <div className={classes.titleWrapper}>\n          <Typography\n            variant={isMobile ? 'h6' : 'h5'}\n            color=\"secondary\"\n            style={{ wordWrap: 'anywhere' }}\n          >\n            {title}\n          </Typography>\n          {user ? (\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              size={isMobile ? 'small' : 'medium'}\n              component={RouterLink}\n              to=\"/ask\"\n              onClick={() => clearEdit()}\n              style={{ minWidth: '9em' }}\n            >\n              Ask Question\n            </Button>\n          ) : (\n            <AuthFormModal buttonType=\"ask\" />\n          )}\n        </div>\n        <div className={classes.quesInfo}>\n          <Typography variant=\"caption\" style={{ marginRight: 10 }}>\n            Asked <strong>{formatDateAgo(createdAt)} ago</strong>\n          </Typography>\n          {createdAt !== updatedAt && (\n            <Typography variant=\"caption\" style={{ marginRight: 10 }}>\n              Edited <strong>{formatDateAgo(updatedAt)} ago</strong>\n            </Typography>\n          )}\n          <Typography variant=\"caption\">\n            Viewed <strong>{views} times</strong>\n          </Typography>\n        </div>\n      </div>\n      <Divider />\n      <Grid container direction=\"row\" wrap=\"nowrap\" justify=\"space-between\">\n        <QuesPageContent question={question} />\n        <RightSidePanel />\n      </Grid>\n    </div>\n  );\n};\n\nexport default QuestionPage;\n"]},"metadata":{},"sourceType":"module"}